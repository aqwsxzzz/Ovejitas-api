---
description: 
globs: 
alwaysApply: false
---
# Cursor Rule: Commits and Pull Requests

## Commit Message Guidelines

- All commit messages must follow the [Conventional Commits](mdc:https:/www.conventionalcommits.org) specification.
- Commit message format:
  - `type(scope): description`
  - Example: `feat(user): add user registration endpoint`
  - Types: feat, fix, docs, style, refactor, test, chore, etc.
- Use the imperative mood in the subject line (e.g., "add" not "added").
- Scope should be the module or feature affected.
- Body (optional) should explain the "why" behind the change if not obvious.

## Branch Naming

- All new work must be done in branches named by type and description.
- Format: `feature/description`, `bugfix/description`, `chore/description`, etc.
- Examples:
  - `feature/user-registration`
  - `bugfix/login-error`
  - `chore/update-deps`

## Pull Request Requirements

- All changes must be submitted via Pull Request (PR).
- PRs must:
  - Reference the related issue or user story (if applicable).
  - Pass all tests and lint checks (CI must be green).
  - Receive at least one approval from another team member.
  - Not be self-merged (author cannot merge their own PR).
  - Include a clear description of the change and any relevant context.
  - Update documentation if the change affects public APIs or behavior.

## Code Review Checklist

- Code style and formatting (ESLint)
- Tests exist and pass
- Documentation is updated if needed
- Commit messages follow conventional commits
- Branch name follows the required format

## Enforcement

- Use commit linting and branch protection rules to enforce these requirements.
- PRs that do not meet these criteria should not be merged.
