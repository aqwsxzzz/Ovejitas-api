---
description: 
globs: 
alwaysApply: true
---
# Cursor Rule: Project Folder Structure

**All application code and logic must reside inside the `src/` directory. The root should only contain configuration, build, environment files, and the `.cursor` folder for project metadata and rules.**

## Root Directory

```plaintext
/
├── src/
│   ├── models/         # Sequelize models
│   ├── migrations/     # Sequelize migrations (CommonJS, kebab-case, timestamped)
│   ├── seeders/        # Sequelize seeders (optional)
│   ├── routes/         # Fastify route definitions
│   ├── controllers/    # Route handlers/business logic
│   ├── plugins/        # Fastify plugins (e.g., db connection)
│   ├── config/         # Sequelize and app config
│   ├── schemas/        # JSON Schema or other validation schemas
│   ├── serializers/    # Response serialization logic (e.g., DTOs, output shaping)
│   └── index.ts        # Fastify app entry point
│
├── .cursor/            # Project metadata, rules, and user stories
│   ├── rules/          # Cursor rules (project conventions)
│   └── user-stories/   # User stories for the project
│
├── .env                # Environment variables
├── .gitignore
├── docker-compose.yml
├── Dockerfile
├── nodemon.json
├── package.json
├── tsconfig.json
└── README.md
```

## Rules

- All source code (models, routes, controllers, plugins, config, schemas, serializers, etc.) must be placed inside `src/`.
- Only configuration, build, environment files, and the `.cursor` folder are allowed at the root level.
- No business logic, application code, or migrations should exist outside `src/`.
- Use subfolders in `src/` for clear separation of concerns:
  - `models/` for Sequelize models
  - `migrations/` for Sequelize migrations (**must use CommonJS syntax and be named in kebab-case with a timestamp and module prefix**)
  - `seeders/` for optional seed data
  - `routes/` for Fastify route definitions
  - `controllers/` for business logic
  - `plugins/` for Fastify plugins (e.g., DB connection)
  - `config/` for configuration files (e.g., Sequelize config)
  - `schemas/` for JSON Schema or other validation schemas (do not place validation schemas in `models/`)
  - `serializers/` for response serialization logic (e.g., DTOs, output shaping)
- The entry point (`index.ts`) must be in `src/`.
- The `.cursor/` folder is reserved for project metadata, rules, and user stories. Do not place application code here.

## Migration File Requirements

- All migration files must be placed in `src/migrations/`.
- Migration files must use CommonJS (`require`/`module.exports`), not ES module syntax.
- Migration files must be named in kebab-case, with a timestamp prefix and module prefix (e.g., `20240607153000-user-model-migration.ts`).
