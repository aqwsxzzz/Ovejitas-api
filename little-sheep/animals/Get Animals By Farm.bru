meta {
  name: Get Animals By Farm
  type: http
  seq: 1
}

get {
  url: http://localhost:8080/api/v1/animals?include=species.translations,breed,father,mother&language=en&sex=female
  body: none
  auth: none
}

headers {
  Content-Type: application/json
}

params:query {
  include: species.translations,breed,father,mother
  language: en
  sex: female
}

docs {
  # Get Animals By Farm
  
  Retrieves all animals for the authenticated user's last visited farm.
  
  ## Authentication
  
  **Required**: JWT cookie from login endpoint
  
  ## Query Parameters
  
  ### Include Options
  - `include` (string, optional): Comma-separated list of related data to include
    - Available includes:
      - `species` - Include species information
      - `species.translations` - Include species with translation data (filtered by language if specified)
      - `breed` - Include breed information
      - `father` - Include father animal data (partial)
      - `mother` - Include mother animal data (partial)
    - Example: `species.translations,breed,father,mother`
  
  ### Language Filtering
  - `language` (string, optional): Filter species translations by language code
    - Available languages: `en` (English), `es` (Spanish)
    - Only affects translation includes within species - filters to show only the specified language
    - Example: `language=en` shows only English translations for species
  
  ### Animal Filtering
  - `sex` (string, optional): Filter animals by sex
    - Available values: `male`, `female`, `unknown`
    - Example: `sex=female` returns only female animals
  
  ## Response
  
  **Success (200)**:
  ```json
  {
    "status": "success",
    "message": "Success",
    "data": [
      {
        "id": "encoded_animal_id",
        "farmId": "encoded_farm_id",
        "speciesId": "encoded_species_id",
        "breedId": "encoded_breed_id",
        "name": "Bella",
        "tagNumber": "A001",
        "sex": "female",
        "birthDate": "2023-01-01",
        "status": "alive",
        "reproductiveStatus": "open",
        "fatherId": "encoded_father_id",
        "motherId": "encoded_mother_id",
        "acquisitionType": "born",
        "acquisitionDate": "2023-01-01",
        "createdAt": "2024-01-01T00:00:00.000Z",
        "updatedAt": "2024-01-01T00:00:00.000Z",
        "species": {
          "id": "encoded_species_id",
          "createdAt": "2024-01-01T00:00:00.000Z",
          "updatedAt": "2024-01-01T00:00:00.000Z",
          "translations": [
            {
              "id": "encoded_translation_id",
              "language": "en",
              "name": "Bovine",
              "createdAt": "2024-01-01T00:00:00.000Z",
              "updatedAt": "2024-01-01T00:00:00.000Z"
            }
          ]
        },
        "breed": {
          "id": "encoded_breed_id",
          "name": "Holstein"
        },
        "father": {
          "id": "encoded_father_id",
          "name": "Bull Father",
          "tagNumber": "F001"
        }
      }
    ],
    "meta": {
      "timestamp": "2024-01-01T00:00:00.000Z"
    }
  }
  ```
  
  **Error Responses**:
  - `404`: No animals found or invalid farm access
  
  ## Notes
  
  - Uses the user's `lastVisitedFarmId` to determine which farm's animals to return
  - All IDs are encoded using hashids for security
  - Include relationships are dynamically loaded based on query parameter
  - Species translations are filtered by language parameter when `species.translations` is included
  - Results show animals owned by the current farm only
  - Empty array returned if no animals exist
  - Parent animal data (father/mother) includes limited fields for performance
}
