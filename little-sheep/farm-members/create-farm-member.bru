meta {
  name: Create Farm Member
  type: http
  seq: 1
}

post {
  url: http://localhost:8080/api/v1/farm-members
  body: json
  auth: none
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "farmId": 1,
    "userId": 2,
    "role": "member"
  }
}

docs {
  # Create Farm Member
  
  Adds a user as a member to a specific farm with a designated role.
  
  ## Authentication
  
  **Required**: JWT cookie from login endpoint
  
  ## Request Body
  
  - `farmId` (integer, required): Database ID of the farm 
  - `userId` (integer, required): Database ID of the user to add as member
  - `role` (string, required): Role for the farm member
    - Allowed values: `"owner"`, `"member"`
  
  ## Response
  
  **Success (201)**:
  ```json
  {
    "status": "success",
    "message": "Success",
    "data": {
      "id": "encoded_farm_member_id",
      "farmId": 1,
      "userId": 2,
      "role": "member",
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z"
    },
    "meta": {
      "timestamp": "2024-01-01T00:00:00.000Z"
    }
  }
  ```
  
  **Error Responses**:
  - `400`: Invalid request body (missing farmId, userId, or role)
  - `409`: User is already a member of this farm
  
  ## Notes
  
  - **Role Hierarchy**: `"owner"` has full permissions, `"member"` has limited permissions
  - **Unique Constraint**: A user can only have one membership per farm
  - **Permission Required**: Only farm owners can add new members
  - **Database IDs**: This endpoint uses raw database IDs (not encoded)
  - **Farm Member ID**: The returned farm member ID is encoded using hashids
  - Requires authentication to create farm memberships
} 